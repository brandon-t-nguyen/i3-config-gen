#!/usr/bin/env python3

import sys
import os
import yaml

class Workspace:
    # generate Workspace based off of numbering scheme or yaml object
    def __init__(self, mode_num=None, yaml=None):
        # tuple (mode, num, monitor)
        if mode_num is not None:
            mode = str(mode_num[0])
            num = str(mode_num[1])
            mon = mode_num[2]
            self.name = "{num}:{mode}".format(num=num, mode=mode)
            self.bindsym = num
            self.monitor = "$mon"+str(mon) if mon is not None else None
            self.assigns = None
        elif yaml is not None:
            self.name =  str(yaml['name'])
            self.bindsym = str(yaml['bindsym'])
            self.monitor = "$mon"+str(yaml['monitor']) if 'monitor' in yaml else None
            self.assigns = yaml['assigns'] if 'assigns' in yaml else None

def command_go_to(workspace, key=None):
    if type(workspace) is str:
        target = workspace
        if key is None:
            return None
    elif type(workspace) is Workspace:
        target = workspace.name
        key = workspace.bindsym
    else:
        return None
    return "bindsym {} workspace \"{}\", mode \"default\"".format(key, target)

# follow: goes to target workspace
# done: returns to default mode
def command_move_to(workspace, key=None, follow=False, done=False):
    if type(workspace) is str:
        target = workspace
        if key is None:
            return None
    elif type(workspace) is Workspace:
        target = workspace.name
        key = workspace.bindsym
    else:
        return None
    command = "bindsym {}+{} move container to workspace \"{}\"".format("$sup" if follow else "$mod", key, target)
    if follow:
        command += ", workspace \"{}\"".format(target)
    if done:
        command += ", mode \"default\""
    return command

def process_modes(mode):
    # mapping of names to workspace objects
    workspaces = []
    workspaces_map = {}

    # process the autonumbered workspaces
    if 'numbered' in mode:
        for n in range(1, int(mode['numbered'])+1):
            workspace = Workspace(mode_num=(mode['name'], n, mode['monitor'] if 'monitor' in mode else None))
            workspaces.append(workspace)
            workspaces_map[workspace.name] = workspace

    if 'workspaces' in mode:
        for ws in mode['workspaces']:
            workspace = Workspace(yaml=ws)
            workspaces.append(workspace)
            workspaces_map[workspace.name] = workspace

    # generate it
    print("## {}".format(mode['desc']))
    print("### management")
    print("mode \"{}\" {{".format(mode['name']))

    # go to
    for workspace in workspaces:
        print("    " + command_go_to(workspace))

    # move to
    for workspace in workspaces:
        print("    " + command_move_to(workspace))

    # move to and focus
    for workspace in workspaces:
        print("    " + command_move_to(workspace, follow=True, done=True))

    print("    bindsym BackSpace mode \"workspace\"")
    print("    bindsym Escape mode \"default\"")
    print("}")

    # set outputs
    print("### outputs")
    for workspace in [w for w in workspaces if w.monitor is not None]:
        print("workspace \"{}\" output {}".format(workspace.name, workspace.monitor))

    # assignments
    print("### assignments")
    for workspace in workspaces:
        if workspace.assigns is not None:
            for assign in workspace.assigns:
                command = "assign ["
                if 'class' in assign: command += "class=\"{}\" ".format(assign['class'])
                if 'instance' in assign: command += "instance=\"{}\" ".format(assign['instance'])
                if 'title' in assign: command += "title=\"{}\" ".format(assign['title'])
                if 'window_role' in assign: command += "window_role=\"{}\" ".format(assign['window_role'])
                if 'window_type' in assign: command += "window_type=\"{}\" ".format(assign['window_type'])
                command += "] " + workspace.name
                print(command)

    print("")



def main():
    if len(sys.argv) < 2:
        print("{} <description file>".format(sys.argv[0]))
        sys.exit(1)

    path = sys.argv[1]

    with open(path, 'r') as f:
        data = yaml.safe_load(f)

        print("# Workspaces automatically generated by {}".format(os.path.basename(sys.argv[0])))
        if 'modes' in data:

            # generate workspace mode selector
            print("mode \"workspace\" {")

            print("    ## Mode keybindings")
            for mode in data['modes']:
                if 'bindsym' in mode:
                    print("    bindsym {} mode \"{}\"".format(mode['bindsym'], mode['name']))

            # process hot-keyed keys
            print("    ## Favorite workspace keybindings")
            if 'favorites' in data:
                for x in [y for y in range(1,11) if y in data['favorites']]:
                    print("    " + command_go_to(data['favorites'][x], x))
                for x in [y for y in range(1,11) if y in data['favorites']]:
                    print("    " + command_move_to(data['favorites'][x], x))
                for x in [y for y in range(1,11) if y in data['favorites']]:
                    print("    " + command_move_to(data['favorites'][x], x, follow=True, done=True))

            # manual entry mode
            print("    ## Manual entry")
            print("    bindsym Return exec i3-input -F \"workspace %s\" -l 32 -P \"Go to: \", mode \"default\"")
            print("    bindsym $sup+Return exec i3-input -F \"move container to workspace %s\" -l 32 -P \"Move to: \", mode \"default\"")
            print("    bindsym BackSpace mode \"default\"")
            print("    bindsym Escape mode \"default\"")

            print("}")

            # keybind
            print("bindsym $sup+w mode \"workspace\"")

            # generate workspaces for modes
            for mode in data['modes']:
                process_modes(mode)

if __name__ == '__main__':
    main()
